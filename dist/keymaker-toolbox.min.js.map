{"version":3,"sources":["/source/keymaker-toolbox.js","/source/src/keymaker-toolbox.js","keymaker-toolbox.min.js"],"names":["global","factory","exports","module","require","define","amd","keymakerToolbox","sjcl","this","Characters","lower","split","upper","number","special","makeKey","password","salt","iterations","arguments","length","undefined","keylen","dk","misc","pbkdf2","codec","utf8String","toBits","hex","fromBits","types","allTypes","forEach","e","i","push","decs","match","map","parseInt","characters","dec","type","indices","index","splice","join","keymaker_toolbox"],"mappings":"CAAA,SAAWA,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,EAAQG,QAAQ,SAC9E,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,QAASJ,GAC9DD,EAAOO,gBAAkBN,EAAQD,EAAOQ,OACxCC,KAAM,SAAUD,GAAQ,YCF1B,IAAME,IACJC,MAAO,6BAA6BC,MAAM,IAC1CC,MAAO,6BAA6BD,MAAM,IAC1CE,OAAQ,aAAaF,MAAM,IAC3BG,QAAS,qCAAqCH,MAAM,KAGhDL,GACJS,QAAO,SAACC,EAAUC,GCId,GDJoBC,GAAAC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAW,IAAAA,UAAA,GAAQG,EAAAH,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAO,GAAAA,UAAA,GAAIT,EAAAS,UAAAC,QAAA,GAAAC,SAAAF,UAAA,IAAM,EAAAA,UAAA,GAAMP,EAAAO,UAAAC,QAAA,GAAAC,SAAAF,UAAA,IAAM,EAAAA,UAAA,GAAMN,EAAAM,UAAAC,QAAA,GAAAC,SAAAF,UAAA,IAAO,EAAAA,UAAA,GAAML,EAAAK,UAAAC,QAAA,GAAAC,SAAAF,UAAA,IAAQ,EAAAA,UAAA,GAC7FI,EAAKhB,EAAKiB,KAAKC,OAAOT,EACAT,EAAKmB,MAAMC,WAAWC,OAAOX,GAC7BC,EACS,EAATI,GACtBO,EAAMtB,EAAKmB,MAAMG,IAAIC,SAASP,GAE9BQ,KACEC,GAAY,QAAS,QAAS,SAAU,UAO9C,KANCtB,EAAOE,EAAOC,EAAQC,GAASmB,QAAQ,SAACC,EAAGC,GACtCD,GACFH,EAAMK,KAAKJ,EAASG,MAIH,IAAjBJ,EAAMX,QAAgBE,EAASS,EAAMX,OACvC,MAAOS,EAGT,IAAIQ,GAAOR,EAAIS,MAAM,SAASC,IAAI,SAAAJ,GCQ9B,MDRmCK,UAASL,EAAG,MAC/CM,EAAaJ,EAAKE,IAAI,SAAAG,GACxB,GAAIC,GAAOZ,EAAMW,EAAMX,EAAMX,OAC7B,OAAOX,GAAWkC,GAAMD,EAAMjC,EAAWkC,GAAMvB,UAI7CwB,EAAUH,EAAWF,IAAI,SAACL,EAAGC,GCU7B,MDVmCA,KACnCU,EAAQ,CAOZ,OANAd,GAAME,QAAQ,SAAAU,GACZ,GAAIR,GAAIE,EAAKQ,GAASD,EAAQxB,MAC9ByB,GAAQD,EAAQT,GAChBS,EAAQE,OAAOX,EAAG,GAClBM,EAAWI,GAASpC,EAAWkC,GAAMN,EAAKQ,GAASpC,EAAWkC,GAAMvB,UAE/DqB,EAAWM,KAAK,MA5C3BC,EAAA1C,CDsDE,OAAO0C","file":"keymaker-toolbox.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('sjcl')) :\n  typeof define === 'function' && define.amd ? define(['sjcl'], factory) :\n  global.keymakerToolbox = factory(global.sjcl)\n}(this, function (sjcl) { 'use strict';\n\n  const Characters = {\n    lower: 'abcdefghijklmnopqrstuvwxyz'.split(''),\n    upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split(''),\n    number: '0123456789'.split(''),\n    special: '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'.split('')\n  };\n\n  const keymakerToolbox = {\n    makeKey(password, salt, iterations=100000, keylen=32, lower=true, upper=true, number=true, special=true) {\n      let dk = sjcl.misc.pbkdf2(password,\n                                sjcl.codec.utf8String.toBits(salt),\n                                iterations,\n                                keylen * 8);\n      let hex = sjcl.codec.hex.fromBits(dk);\n\n      let types = [];\n      const allTypes = ['lower', 'upper', 'number', 'special'];\n      [lower, upper, number, special].forEach((e, i) => {\n        if (e) {\n          types.push(allTypes[i]);\n        }\n      });\n\n      if (types.length === 0 || keylen < types.length) {\n        return hex;\n      }\n\n      let decs = hex.match(/.{2}/g).map(i => parseInt(i, 16));\n      let characters = decs.map(dec => {\n        let type = types[dec % types.length];\n        return Characters[type][dec % Characters[type].length];\n      });\n\n      // ensure all types at least one\n      let indices = characters.map((e, i) => i);\n      let index = 0;\n      types.forEach(type => {\n        let i = decs[index] % indices.length;\n        index = indices[i];\n        indices.splice(i, 1);\n        characters[index] = Characters[type][decs[index] % Characters[type].length];\n      });\n      return characters.join('');\n    }\n  };\n\n  var keymaker_toolbox = keymakerToolbox;\n\n  return keymaker_toolbox;\n\n}));\n","import sjcl from 'sjcl';\n\nconst Characters = {\n  lower: 'abcdefghijklmnopqrstuvwxyz'.split(''),\n  upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split(''),\n  number: '0123456789'.split(''),\n  special: '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'.split('')\n};\n\nconst keymakerToolbox = {\n  makeKey(password, salt, iterations=100000, keylen=32, lower=true, upper=true, number=true, special=true) {\n    let dk = sjcl.misc.pbkdf2(password,\n                              sjcl.codec.utf8String.toBits(salt),\n                              iterations,\n                              keylen * 8);\n    let hex = sjcl.codec.hex.fromBits(dk);\n\n    let types = [];\n    const allTypes = ['lower', 'upper', 'number', 'special'];\n    [lower, upper, number, special].forEach((e, i) => {\n      if (e) {\n        types.push(allTypes[i]);\n      }\n    });\n\n    if (types.length === 0 || keylen < types.length) {\n      return hex;\n    }\n\n    let decs = hex.match(/.{2}/g).map(i => parseInt(i, 16));\n    let characters = decs.map(dec => {\n      let type = types[dec % types.length];\n      return Characters[type][dec % Characters[type].length];\n    });\n\n    // ensure all types at least one\n    let indices = characters.map((e, i) => i);\n    let index = 0;\n    types.forEach(type => {\n      let i = decs[index] % indices.length;\n      index = indices[i];\n      indices.splice(i, 1);\n      characters[index] = Characters[type][decs[index] % Characters[type].length];\n    });\n    return characters.join('');\n  }\n};\n\nexport default keymakerToolbox;\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('sjcl')) : typeof define === 'function' && define.amd ? define(['sjcl'], factory) : global.keymakerToolbox = factory(global.sjcl);\n})(this, function (sjcl) {\n  'use strict';\n\n  var Characters = {\n    lower: 'abcdefghijklmnopqrstuvwxyz'.split(''),\n    upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split(''),\n    number: '0123456789'.split(''),\n    special: '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'.split('')\n  };\n\n  var keymakerToolbox = {\n    makeKey: function makeKey(password, salt) {\n      var iterations = arguments.length <= 2 || arguments[2] === undefined ? 100000 : arguments[2];\n      var keylen = arguments.length <= 3 || arguments[3] === undefined ? 32 : arguments[3];\n      var lower = arguments.length <= 4 || arguments[4] === undefined ? true : arguments[4];\n      var upper = arguments.length <= 5 || arguments[5] === undefined ? true : arguments[5];\n      var number = arguments.length <= 6 || arguments[6] === undefined ? true : arguments[6];\n      var special = arguments.length <= 7 || arguments[7] === undefined ? true : arguments[7];\n\n      var dk = sjcl.misc.pbkdf2(password, sjcl.codec.utf8String.toBits(salt), iterations, keylen * 8);\n      var hex = sjcl.codec.hex.fromBits(dk);\n\n      var types = [];\n      var allTypes = ['lower', 'upper', 'number', 'special'];\n      [lower, upper, number, special].forEach(function (e, i) {\n        if (e) {\n          types.push(allTypes[i]);\n        }\n      });\n\n      if (types.length === 0 || keylen < types.length) {\n        return hex;\n      }\n\n      var decs = hex.match(/.{2}/g).map(function (i) {\n        return parseInt(i, 16);\n      });\n      var characters = decs.map(function (dec) {\n        var type = types[dec % types.length];\n        return Characters[type][dec % Characters[type].length];\n      });\n\n      // ensure all types at least one\n      var indices = characters.map(function (e, i) {\n        return i;\n      });\n      var index = 0;\n      types.forEach(function (type) {\n        var i = decs[index] % indices.length;\n        index = indices[i];\n        indices.splice(i, 1);\n        characters[index] = Characters[type][decs[index] % Characters[type].length];\n      });\n      return characters.join('');\n    }\n  };\n\n  var keymaker_toolbox = keymakerToolbox;\n\n  return keymaker_toolbox;\n});\n//# sourceMappingURL=keymaker-toolbox.js.map\n"],"sourceRoot":"/source/"}