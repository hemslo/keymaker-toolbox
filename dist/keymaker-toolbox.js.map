{"version":3,"sources":["keymaker-toolbox.js","src/keymaker-toolbox.js"],"names":[],"mappings":"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","file":"keymaker-toolbox.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('sjcl')) :\n  typeof define === 'function' && define.amd ? define(['sjcl'], factory) :\n  global.keymakerToolbox = factory(global.sjcl)\n}(this, function (sjcl) { 'use strict';\n\n  const Characters = {\n    lower: 'abcdefghijklmnopqrstuvwxyz'.split(''),\n    upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split(''),\n    number: '0123456789'.split(''),\n    special: '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'.split('')\n  };\n\n  const keymakerToolbox = {\n    makeKey(password, salt, iterations=100000, keylen=32, lower=true, upper=true, number=true, special=true) {\n      let dk = sjcl.misc.pbkdf2(password,\n                                sjcl.codec.utf8String.toBits(salt),\n                                iterations,\n                                keylen * 8);\n      let hex = sjcl.codec.hex.fromBits(dk);\n\n      let types = [];\n      const allTypes = ['lower', 'upper', 'number', 'special'];\n      [lower, upper, number, special].forEach((e, i) => {\n        if (e) {\n          types.push(allTypes[i]);\n        }\n      });\n\n      if (types.length === 0 || keylen < types.length) {\n        return hex;\n      }\n\n      let decs = hex.match(/.{2}/g).map(i => parseInt(i, 16));\n      let characters = decs.map(dec => {\n        let type = types[dec % types.length];\n        return Characters[type][dec % Characters[type].length];\n      });\n\n      // ensure all types at least one\n      let indices = characters.map((e, i) => i);\n      let index = 0;\n      types.forEach(type => {\n        let i = decs[index] % indices.length;\n        index = indices[i];\n        indices.splice(i, 1);\n        characters[index] = Characters[type][decs[index] % Characters[type].length];\n      });\n      return characters.join('');\n    }\n  };\n\n  var keymaker_toolbox = keymakerToolbox;\n\n  return keymaker_toolbox;\n\n}));\n","import sjcl from 'sjcl';\n\nconst Characters = {\n  lower: 'abcdefghijklmnopqrstuvwxyz'.split(''),\n  upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split(''),\n  number: '0123456789'.split(''),\n  special: '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'.split('')\n};\n\nconst keymakerToolbox = {\n  makeKey(password, salt, iterations=100000, keylen=32, lower=true, upper=true, number=true, special=true) {\n    let dk = sjcl.misc.pbkdf2(password,\n                              sjcl.codec.utf8String.toBits(salt),\n                              iterations,\n                              keylen * 8);\n    let hex = sjcl.codec.hex.fromBits(dk);\n\n    let types = [];\n    const allTypes = ['lower', 'upper', 'number', 'special'];\n    [lower, upper, number, special].forEach((e, i) => {\n      if (e) {\n        types.push(allTypes[i]);\n      }\n    });\n\n    if (types.length === 0 || keylen < types.length) {\n      return hex;\n    }\n\n    let decs = hex.match(/.{2}/g).map(i => parseInt(i, 16));\n    let characters = decs.map(dec => {\n      let type = types[dec % types.length];\n      return Characters[type][dec % Characters[type].length];\n    });\n\n    // ensure all types at least one\n    let indices = characters.map((e, i) => i);\n    let index = 0;\n    types.forEach(type => {\n      let i = decs[index] % indices.length;\n      index = indices[i];\n      indices.splice(i, 1);\n      characters[index] = Characters[type][decs[index] % Characters[type].length];\n    });\n    return characters.join('');\n  }\n};\n\nexport default keymakerToolbox;\n"],"sourceRoot":"/source/"}